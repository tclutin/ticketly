package bot

import (
	"context"
	"github.com/tclutin/ticketly/telegram_bot/internal/config"
	"github.com/tclutin/ticketly/telegram_bot/internal/fsm"
	"github.com/tclutin/ticketly/telegram_bot/pkg/client/redis"
	"gopkg.in/telebot.v4"
	"log/slog"
	"time"
)

type Bot struct {
	bot *telebot.Bot
	fsm *fsm.FSM
}

func New() *Bot {
	cfg := config.MustLoad()

	redisClient := redis.NewClientRedis(cfg.Redis.Host, cfg.Redis.Port)
	fsmStore := fsm.NewRedisStore(redisClient)
	fsm := fsm.New(fsmStore)

	redisClient.Set(context.Background(), "—Ö—É–π", "–∏–¥–∏ –Ω–∞—Ö—É–π", 1*time.Hour)

	bot, err := telebot.NewBot(telebot.Settings{
		Token:  cfg.Bot.Token,
		Poller: &telebot.LongPoller{Timeout: cfg.Bot.Timeout},
	})

	if err != nil {
		slog.Error("failed to initialize telegram bot", slog.Any("error", err))
		return nil
	}

	return &Bot{
		bot: bot,
		fsm: fsm,
	}
}

func (b *Bot) Run() {
	// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
	b.bot.Handle("/start", func(c telebot.Context) error {
		userID := c.Sender().ID
		_ = b.fsm.Set(userID, "select_type")
		return c.Send("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–∏–∫–µ—Ç–∞: —á–∞—Ç –∏–ª–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?")
	})

	// FSM: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–∏–∫–µ—Ç–∞
	b.fsm.Register("select_type", func(c telebot.Context, userID int64) error {
		// –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∏–ø —Ç–∏–∫–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ Redis
		_ = b.fsm.Set(userID, "select_category")
		return c.Send("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–∞:")
	})

	// FSM: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	b.fsm.Register("select_category", func(c telebot.Context, userID int64) error {
		_ = b.fsm.Set(userID, "write_message")
		return c.Send("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:")
	})

	// FSM: —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
	b.fsm.Register("write_message", func(c telebot.Context, userID int64) error {
		_ = b.fsm.Clear(userID)
		return c.Send("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
	})

	b.bot.Handle("/start1", func(c telebot.Context) error {
		return c.Send("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:", &telebot.ReplyMarkup{
			ResizeKeyboard: true,
			ReplyKeyboard: [][]telebot.ReplyButton{{
				{Text: "üì® –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"},
				{Text: "üì® –°–æ–∑–¥–∞—Ç–≤—å –∑–∞—è–≤–∫—É"},
			}},
		})
	})
	// FSM Middleware ‚Äî –Ω–∞ –∫–∞–∂–¥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.bot.Handle(telebot.OnText, b.fsm.Middleware())

	b.bot.Start()
}
